import { inject, Injectable } from '@angular/core';
import { TranslocoService } from '@ngneat/transloco';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';
import { isLocaleFormat, toDate } from './helpers';
import { getDefaultOptions } from './shared';
import { TRANSLOCO_LOCALE_CONFIG, TRANSLOCO_LOCALE_CURRENCY_MAPPING, TRANSLOCO_LOCALE_DEFAULT_CURRENCY, TRANSLOCO_LOCALE_DEFAULT_LOCALE, TRANSLOCO_LOCALE_LANG_MAPPING, } from './transloco-locale.config';
import { TRANSLOCO_DATE_TRANSFORMER, TRANSLOCO_NUMBER_TRANSFORMER, } from './transloco-locale.transformers';
import * as i0 from "@angular/core";
export class TranslocoLocaleService {
    translocoService = inject(TranslocoService);
    langLocaleMapping = inject(TRANSLOCO_LOCALE_LANG_MAPPING);
    defaultLocale = inject(TRANSLOCO_LOCALE_DEFAULT_LOCALE);
    defaultCurrency = inject(TRANSLOCO_LOCALE_DEFAULT_CURRENCY);
    localeCurrencyMapping = inject(TRANSLOCO_LOCALE_CURRENCY_MAPPING);
    numberTransformer = inject(TRANSLOCO_NUMBER_TRANSFORMER);
    dateTransformer = inject(TRANSLOCO_DATE_TRANSFORMER);
    localeConfig = inject(TRANSLOCO_LOCALE_CONFIG);
    _locale = this.defaultLocale || this.toLocale(this.translocoService.getActiveLang());
    locale = new BehaviorSubject(this._locale);
    subscription = this.translocoService.langChanges$
        .pipe(map((lang) => this.toLocale(lang)), filter(Boolean))
        .subscribe((locale) => this.setLocale(locale));
    localeChanges$ = this.locale.asObservable().pipe(distinctUntilChanged());
    getLocale() {
        return this._locale;
    }
    setLocale(locale) {
        if (!isLocaleFormat(locale)) {
            console.error(`${locale} isn't a valid locale format`);
            return;
        }
        this.locale.next(locale);
        this._locale = locale;
    }
    /**
     * Get the currency symbol for the currently set locale.
     */
    getCurrencySymbol(locale = this.getLocale()) {
        const currency = this.localeCurrencyMapping[locale];
        const numberFormat = new Intl.NumberFormat(locale, {
            style: 'currency',
            currencyDisplay: 'symbol',
            currency,
            minimumFractionDigits: 0,
            maximumFractionDigits: 0,
        });
        const pivot = 0;
        return numberFormat
            .format(pivot)
            .split(pivot.toString())
            .map((element) => element.trim())
            .find((element) => !!element);
    }
    /**
     * Transform a date into the locale's date format.
     *
     * The date expression: a `Date` object, a number
     * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).
     *
     * @example
     *
     * localizeDate(new Date(2019, 9, 7, 12, 0, 0)) // 10/7/2019
     * localizeDate(date, 'en-US', { dateStyle: 'medium', timeStyle: 'medium' }) // Sep 10, 2019, 10:46:12 PM
     * localizeDate(date) 'en-US', { timeZone: 'UTC', timeStyle: 'full' } // 7:40:32 PM Coordinated Universal Time
     * localizeDate(1, 'en-US', { dateStyle: 'medium' }) // Jan 1, 1970
     * localizeDate('2019-02-08', 'en-US', { dateStyle: 'medium' }) // Feb 8, 2019
     */
    localizeDate(date, locale = this.getLocale(), options = {}) {
        const resolved = options ?? getDefaultOptions(locale, 'date', this.localeConfig);
        return this.dateTransformer.transform(toDate(date), locale, resolved);
    }
    /**
     * Transform a number into the locale's number format according to the number type.
     *
     * localizeNumber(1234567890, 'decimal') // 1,234,567,890
     * localizeNumber(0.5, 'percent') // 50%
     * localizeNumber(1000, 'currency') // $1,000.00
     */
    localizeNumber(value, style, locale = this.getLocale(), options) {
        let resolved = options ?? getDefaultOptions(locale, style, this.localeConfig);
        if (style === 'currency') {
            resolved = {
                ...resolved,
                currency: resolved.currency || this._resolveCurrencyCode(locale),
            };
        }
        return this.numberTransformer.transform(value, style, locale, resolved);
    }
    /**
     * @internal
     */
    _resolveCurrencyCode(locale = this.getLocale()) {
        return this.localeCurrencyMapping[locale] || this.defaultCurrency;
    }
    ngOnDestroy() {
        this.subscription?.unsubscribe();
        // Caretaker note: it's important to clean up references to subscriptions since they save the `next`
        // callback within its `destination` property, preventing classes from being GC'd.
        this.subscription = null;
    }
    toLocale(val) {
        if (this.langLocaleMapping[val]) {
            return this.langLocaleMapping[val];
        }
        if (isLocaleFormat(val)) {
            return val;
        }
        return '';
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.7", ngImport: i0, type: TranslocoLocaleService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.7", ngImport: i0, type: TranslocoLocaleService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.7", ngImport: i0, type: TranslocoLocaleService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,