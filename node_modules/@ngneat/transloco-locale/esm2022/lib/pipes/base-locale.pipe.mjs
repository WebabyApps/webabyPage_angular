import { ChangeDetectorRef, inject, Injectable, } from '@angular/core';
import { TranslocoLocaleService } from '../transloco-locale.service';
import * as i0 from "@angular/core";
export class BaseLocalePipe {
    localeService = inject(TranslocoLocaleService);
    cdr = inject(ChangeDetectorRef);
    localeChangeSub = this.localeService.localeChanges$.subscribe(() => this.cdr.markForCheck());
    getLocale(locale) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return locale || this.localeService.getLocale();
    }
    ngOnDestroy() {
        this.localeChangeSub?.unsubscribe();
        // Caretaker note: it's important to clean up references to subscriptions since they save the `next`
        // callback within its `destination` property, preventing classes from being GC'd.
        this.localeChangeSub = null;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.7", ngImport: i0, type: BaseLocalePipe, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.7", ngImport: i0, type: BaseLocalePipe });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.7", ngImport: i0, type: BaseLocalePipe, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1sb2NhbGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdHJhbnNsb2NvLWxvY2FsZS9zcmMvbGliL3BpcGVzL2Jhc2UtbG9jYWxlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixNQUFNLEVBQ04sVUFBVSxHQUVYLE1BQU0sZUFBZSxDQUFDO0FBSXZCLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQUlyRSxNQUFNLE9BQWdCLGNBQWM7SUFDeEIsYUFBYSxHQUFHLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQy9DLEdBQUcsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUVsQyxlQUFlLEdBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7SUFFbkUsU0FBUyxDQUFDLE1BQWU7UUFDakMsb0VBQW9FO1FBQ3BFLE9BQU8sTUFBTSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFHLENBQUM7SUFDbkQsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsZUFBZSxFQUFFLFdBQVcsRUFBRSxDQUFDO1FBQ3BDLG9HQUFvRztRQUNwRyxrRkFBa0Y7UUFDbEYsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDOUIsQ0FBQzt1R0FqQm1CLGNBQWM7MkdBQWQsY0FBYzs7MkZBQWQsY0FBYztrQkFEbkMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBpbmplY3QsXG4gIEluamVjdGFibGUsXG4gIE9uRGVzdHJveSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgTG9jYWxlIH0gZnJvbSAnLi4vLi4vbGliL3RyYW5zbG9jby1sb2NhbGUudHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNsb2NvTG9jYWxlU2VydmljZSB9IGZyb20gJy4uL3RyYW5zbG9jby1sb2NhbGUuc2VydmljZSc7XG5cbnR5cGUgRGVwcyA9IFtUcmFuc2xvY29Mb2NhbGVTZXJ2aWNlLCBDaGFuZ2VEZXRlY3RvclJlZl07XG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUxvY2FsZVBpcGUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcm90ZWN0ZWQgbG9jYWxlU2VydmljZSA9IGluamVjdChUcmFuc2xvY29Mb2NhbGVTZXJ2aWNlKTtcbiAgcHJvdGVjdGVkIGNkciA9IGluamVjdChDaGFuZ2VEZXRlY3RvclJlZik7XG5cbiAgcHJpdmF0ZSBsb2NhbGVDaGFuZ2VTdWI6IFN1YnNjcmlwdGlvbiB8IG51bGwgPVxuICAgIHRoaXMubG9jYWxlU2VydmljZS5sb2NhbGVDaGFuZ2VzJC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5jZHIubWFya0ZvckNoZWNrKCkpO1xuXG4gIHByb3RlY3RlZCBnZXRMb2NhbGUobG9jYWxlPzogTG9jYWxlKTogTG9jYWxlIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgIHJldHVybiBsb2NhbGUgfHwgdGhpcy5sb2NhbGVTZXJ2aWNlLmdldExvY2FsZSgpITtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMubG9jYWxlQ2hhbmdlU3ViPy51bnN1YnNjcmliZSgpO1xuICAgIC8vIENhcmV0YWtlciBub3RlOiBpdCdzIGltcG9ydGFudCB0byBjbGVhbiB1cCByZWZlcmVuY2VzIHRvIHN1YnNjcmlwdGlvbnMgc2luY2UgdGhleSBzYXZlIHRoZSBgbmV4dGBcbiAgICAvLyBjYWxsYmFjayB3aXRoaW4gaXRzIGBkZXN0aW5hdGlvbmAgcHJvcGVydHksIHByZXZlbnRpbmcgY2xhc3NlcyBmcm9tIGJlaW5nIEdDJ2QuXG4gICAgdGhpcy5sb2NhbGVDaGFuZ2VTdWIgPSBudWxsO1xuICB9XG59XG4iXX0=